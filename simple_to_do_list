"""
Simple To Do List with PyQt5 and PyQt5 Designer
To run use SimpleToDoList.ui in same directory
"""
import sys
from PyQt5.QtCore import pyqtSlot, Qt
from PyQt5.QtWidgets import QApplication, QDialog, QMessageBox
from PyQt5.uic import loadUi


class ToDoList(QDialog):
    def __init__(self):
        super(ToDoList, self).__init__()
        loadUi('SimpleToDoList.ui', self)
        self.setWindowTitle('Simple To Do List App')
        self.setWindowFlag(Qt.WindowCloseButtonHint, False)
        self.setWindowFlag(Qt.WindowContextHelpButtonHint, False)
        self.setWindowFlag(Qt.WindowSystemMenuHint, False)
        self.pushButton_Add.clicked.connect(self.on_push_button_clicked)
        self.pushButton_Quit.clicked.connect(self.on_quit_button_clicked)
        self.textEditToDoList.setReadOnly(True)
        self.pushButton_Add.setStyleSheet('QPushButton {background-color: #4885b5}')
        self.pushButton_Quit.setStyleSheet('QPushButton {background-color: #c46c71}')


    @pyqtSlot()
    def on_push_button_clicked(self):
        string1 = self.lineEditToDo.text()
        if string1 == '':
            self.error_message()
        self.lineEditToDo.setText('')
        self.textEditToDoList.append(string1)

    @pyqtSlot()
    def on_quit_button_clicked(self):
        # Save the ToDoList
        # read lines of text edit box and add to lists
        text_row = self.textEditToDoList.toPlainText()
        text_list = str(text_row)
        file_todo_list = open('ToDoList.txt', 'w')
        file_todo_list.writelines(text_list)
        file_todo_list.close()
        sys.exit(0)

    @pyqtSlot()
    def error_message(self):
        QMessageBox.information(self, "Error Message", "Error: Blank ToDo Item!")


app = QApplication(sys.argv)
widget = ToDoList()
widget.show()
sys.exit(app.exec_())
